"""Graphical password generator. Created by Mathias Larsson"""

import random
import tkinter as tk


# Password security configuration

# GUI settings
root = tk.Tk()
root.title("PassFraze Password Generator")
root.minsize(800, 800)
root.resizable(False, False)
root.configure(background='AntiqueWhite1')

# Logo Image
# Imports the logo image and resizes it
img_logo = tk.PhotoImage(file="van_der_graaf_generator_v2.png").subsample(10, 10)
lbl_logo = tk.Label(root, image=img_logo, height=200, width=200, text="PassFraze Password Generator", background='AntiqueWhite2')
lbl_logo.pack()

lbl_result = tk.Label(text='', pady=10, padx=100, bg='AntiqueWhite4', fg='White')
lbl_result.pack()

# Settings buttons

# Setting password type
rad_pw_type = tk.StringVar()

rad_pw_type_string = tk.Radiobutton(root, text="Password Type: String", variable=rad_pw_type, value='String', bg='AntiqueWhite1')
rad_pw_type_string.pack()

rad_pw_type_phrase = tk.Radiobutton(root, text= "Password Type: Phrase", variable= rad_pw_type, value='Passphrase', bg='AntiqueWhite1')
rad_pw_type_phrase.pack()

# Setting password complexity
chk_comp_special_char_var = tk.BooleanVar(value=True)
chk_comp_alphanum_char_var = tk.BooleanVar(value=True)

chk_comp_special_char = tk.Checkbutton(root, text="Special characters (such as: '*', '^' or '!' etc) ",
                                       variable=chk_comp_special_char_var, bg='AntiqueWhite1')
chk_comp_special_char.pack()

chk_comp_alphanum_char = tk.Checkbutton(root, text="Alphanumeric characters", variable=chk_comp_alphanum_char_var,
                                        bg='AntiqueWhite1')
chk_comp_alphanum_char.pack()


lbl_length = tk.Label(root, text="Enter the desired password length:", bg='AntiqueWhite1')

# Variable needed to set default pw length in the spinbox
default_length = tk.IntVar(root)
default_length.set(12)

# Box to configure the length of the pw
spinbox_length = tk.Spinbox(
    root,
    from_=1,
    to=100,
    increment=1,
    textvariable=default_length)

lbl_length.pack()
spinbox_length.pack()

# default_length = int(spinbox_length.get())

length = default_length.get()


def update_var(var, index, mode):
    length = default_length.get()
    return length


default_length.trace_add('write', update_var)

def generate_password(length, complexity_special_characters, complexity_numbers):
    # Empty list that will contain the password generated by the generate_password function
    password = []
    # Character set with alphabetical characters only
    char_set_low_sec = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'y', 'x', 'y', 'z',
                        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
                        'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'Y', 'X', 'Y', 'Z']

    # Character set with characters and alphanumericals
    char_set_med_sec = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                        'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'y', 'x', 'y', 'z',
                        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
                        'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'Y', 'X', 'Y', 'Z',
                        '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']


    # Character set with characters and special characters, but no alphanumericals
    char_set_med_sec_no_alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                                'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'y', 'x', 'y', 'z',
                                'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
                                'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'Y', 'X', 'Y', 'Z''!',
                                '"', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-',
                                '.', '_', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']',
                                '{', '|', '}']



    # Character set with alphanumerical and special characters
    char_set_hi_sec = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
                       'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'y', 'x', 'y', 'z',
                       'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
                       'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'Y', 'X', 'Y', 'Z',
                       '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'
                       '!', '"', '#', '$', '%', '&', '(', ')', '*', '+', ',', '-',
                       '.', '_', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']',
                       '{', '|', '}']

    # Generate a password with the lowest security configuration
    if complexity_special_characters == False and complexity_numbers == False:
        for i in range(length):
            # Append random index from the char_set, to the password list
            char_set_len = int(len(char_set_low_sec))
            random_char = random.choice(char_set_low_sec)
            password.append(random_char)
        pass_str = ''.join(password)

    elif complexity_numbers == True and complexity_special_characters == False:
        for i in range(length):
            # Append random index from the char_set, to the password list
            char_set_len = int(len(char_set_med_sec))
            random_char = random.choice(char_set_med_sec)
            password.append(random_char)
        pass_str = ''.join(password)

    elif complexity_numbers == False and complexity_special_characters == True:
        for i in range(length):
            # Append random index from the char_set, to the password list
            char_set_len = int(len(char_set_med_sec_no_alpha))
            random_char = random.choice(char_set_med_sec_no_alpha)
            password.append(random_char)
        pass_str = ''.join(password)

    # Generate a password with the highest security configuration
    elif complexity_numbers and complexity_special_characters == True:
        for i in range(length):
            # Append random index from the char_set, to the password list
            char_set_len = int(len(char_set_hi_sec))
            random_char = random.choice(char_set_hi_sec)
            password.append(random_char)
        pass_str = ''.join(password)
    return pass_str

def generate_passphrase(word_amount, delimiter):
    passphrase = []
    word_list = ['Burgel', 'Bargel', 'Fästing','Kaviar', 'Samförstånd', 'Fyllekalas', 'Olika', 'Behärskat', 'Hjuling',
                 'Trevlig', 'Polis', 'Vessla', 'Brun', 'Glad', 'Rund', 'Inte', 'Kust', 'Val', 'Utsökt', 'Ris', 'Opel',
                 'Ulv','Thörnqvist', 'Luriga', 'Hatt']
    for i in range(word_amount):
        random_word = random.choice(word_list)
        passphrase.append(random_word)
    passphrase_str = delimiter.join(passphrase)
    return passphrase_str
print(generate_passphrase(5, '-'))



# Function needed to use in the command= argument, didn't work otherwise
def update_label():
    password_type = rad_pw_type.get()
    length = int(spinbox_length.get())  # Get updated value from spinbox
    if password_type != 'Passphrase':
        use_special = chk_comp_special_char_var.get()
        use_alphanum = chk_comp_alphanum_char_var.get()

        update_pass_str = generate_password(
                                            length,
                                            complexity_special_characters=use_special,
                                            complexity_numbers=use_alphanum)
    elif password_type == 'Passphrase':
        update_pass_str = generate_passphrase(length, '-')

    root.clipboard_clear()
    root.clipboard_append(update_pass_str)
    lbl_result.config(text=update_pass_str)
    


btn_generate_password = tk.Button(
    root,
    text="Click to generate password",
    width=25,
    height=5,
    bg="AntiqueWhite4",
    fg="yellow",
    command=update_label
)
btn_generate_password.pack()

root.mainloop()
